{"version":3,"file":"index.umd.js","sources":["../src/transition.ts","../src/particle.ts","../src/particle-source.ts","../src/utils/decorators.ts","../src/utils/three.ts","../src/body.ts","../src/physical-particle.ts","../src/physical-particle-source.ts"],"sourcesContent":["import { Vector3, Quaternion } from 'three'\nimport { ParticleState } from '~/particle'\n\nexport interface Pausable {\n  pause(): void\n}\n\nexport type TransitionExecutor = (\n  transition: ParticleState,\n  complete: () => void\n) => Pausable | void | undefined\n\nexport class Transition implements ParticleState {\n  private animation?: Pausable\n  public readonly position: Vector3 = new Vector3()\n  public readonly quaternion: Quaternion = new Quaternion()\n  public readonly scale: Vector3 = new Vector3()\n\n  public static show: TransitionExecutor = (transition, complete) => {\n    transition.scale.set(1, 1, 1)\n    complete()\n  }\n\n  public static hide: TransitionExecutor = (transition, complete) => {\n    transition.scale.set(0, 0, 0)\n    complete()\n  }\n\n  public static compose(\n    ...executors: TransitionExecutor[]\n  ): TransitionExecutor {\n    return (transition: ParticleState, complete: () => void): Pausable => {\n      let animationsToComplete = executors.length\n      const animations = executors.map(executor => executor(transition, () => {\n        --animationsToComplete || complete()\n      }))\n\n      return {\n        pause: () => animations.forEach(animation => {\n          animation && animation.pause()\n        })\n      }\n    }\n  }\n\n  public start(executor: TransitionExecutor, complete: () => void): void {\n    this.stop()\n    this.animation = executor(this, () => {\n      complete()\n      this.animation = undefined\n    }) as Pausable | undefined\n  }\n\n  public stop(): void {\n    if (this.animation && !this.animation.pause) console.log(this.animation)\n    this.animation && this.animation.pause()\n  }\n\n  public dispose(): void {\n    this.animation && this.animation.pause()\n    this.animation = undefined\n  }\n}\n","import { Vector3, Quaternion, Matrix4 } from 'three'\nimport { Transition, TransitionExecutor } from '~/transition'\n\nexport interface ParticleState {\n  position: Vector3\n  quaternion: Quaternion\n  scale: Vector3\n}\n\nexport class Particle implements ParticleState {\n  public readonly position: Vector3 = new Vector3()\n  public readonly quaternion: Quaternion = new Quaternion()\n  public readonly scale: Vector3 = new Vector3(1, 1, 1)\n  public readonly matrix: Matrix4 = new Matrix4()\n  public readonly transition: Transition = new Transition()\n  public appended: boolean = false\n  public removed: boolean = false\n\n  public append(\n    transition?: TransitionExecutor,\n    complete?: (particle: this) => void\n  ): void {\n    this.appended = true\n    this.transition.start(transition || Transition.show, () => {\n      complete && complete(this)\n    })\n  }\n\n  public remove(\n    transition?: TransitionExecutor,\n    complete?: (particle: this) => void\n  ): void {\n    this.transition.start(transition || Transition.hide, () => {\n      this.removed = true\n      complete && complete(this)\n    })\n  }\n\n  public update(): boolean {\n    if (!this.appended) return false\n\n    this.matrix.compose(\n      this.position.clone().add(this.transition.position),\n      this.quaternion.clone().multiply(this.transition.quaternion),\n      this.scale.clone().multiply(this.transition.scale)\n    )\n\n    if (this.removed) {\n      this.appended = false\n      this.removed = false\n    }\n\n    return true\n  }\n\n  public dispose(): void {\n    this.transition.dispose()\n  }\n}\n","import {\n  Color,\n  Object3D,\n  Geometry,\n  BufferGeometry,\n  InstancedMesh,\n  MeshNormalMaterial\n} from 'three'\n\nimport { GLTF, GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader'\nimport { Particle } from '~/particle'\nimport { TransitionExecutor } from '~/transition'\nimport { lazy, mergeGLTF, ColoredMaterial } from '~/utils'\n\nenum ParticleSourceMutation {\n  Append = 1,\n  Remove = -1\n}\n\ninterface ParticleSourceTransitionExecutors {\n  append?: TransitionExecutor\n  remove?: TransitionExecutor\n}\n\nexport interface ParticleSourceMutationExecutors<\n  P extends Particle = Particle\n> {\n  prepare?: (particle: P) => void\n  complete?: (particle: P) => void\n  transition?: TransitionExecutor\n}\n\nexport interface ParticleSourceParameters {\n  geometry?: Geometry | BufferGeometry\n  material?: ColoredMaterial | ColoredMaterial[]\n  count?: number\n  color?: Color | number\n  transition?: ParticleSourceTransitionExecutors\n}\n\nexport class ParticleSource<P extends Particle = Particle> extends Object3D {\n  private mesh?: InstancedMesh\n  private normalMesh?: InstancedMesh\n  private _geometry?: Geometry | BufferGeometry\n  private _material?: ColoredMaterial | ColoredMaterial[]\n  private _color!: Color | number\n  private _usesNormalMaterial: boolean = false\n\n  protected particles: P[] = []\n\n  public appendedParticles: number = 0\n  public transition: ParticleSourceTransitionExecutors\n  public count: number\n\n  public constructor({\n    geometry = undefined,\n    material = undefined,\n    count = 0,\n    color = 0xffffff,\n    transition = {}\n  }: ParticleSourceParameters = {}) {\n    super()\n\n    this.transition = transition\n    this.geometry = geometry\n    this.material = material\n    this.color = color\n    this.count = count\n  }\n\n  @lazy private get normalMaterial(): MeshNormalMaterial {\n    return new MeshNormalMaterial({\n      morphTargets: true,\n      skinning: true\n    })\n  }\n\n  public get generated(): boolean {\n    return !!this.mesh\n  }\n\n  public get geometry(): Geometry | BufferGeometry | undefined {\n    return this._geometry\n  }\n\n  public set geometry(v: Geometry | BufferGeometry | undefined) {\n    this._geometry = v\n    this.updateGeometry()\n  }\n\n  public get material(): ColoredMaterial | ColoredMaterial[] | undefined {\n    return this._material\n  }\n\n  public set material(v: ColoredMaterial | ColoredMaterial[] | undefined) {\n    this._material = v\n    this.updateMaterial()\n  }\n\n  public get color(): Color | number {\n    return this._color\n  }\n\n  public set color(v: Color | number) {\n    this._color = v\n\n    if (!this.material) return\n\n    if (Array.isArray(this.material)) {\n      this.material.forEach(material => material.color.set(v as Color))\n    } else {\n      this.material.color.set(v as Color)\n    }\n  }\n\n  public get usesNormalMaterial(): boolean {\n    return this._usesNormalMaterial\n  }\n\n  public set usesNormalMaterial(v: boolean) {\n    this._usesNormalMaterial = v\n    if (!this.mesh || (!v && !this.material)) return\n    this.mesh.material = v ? this.normalMaterial : this.material!\n  }\n\n  protected updateGeometry(): void {\n    if (!this.mesh || !this.geometry) return\n\n    this.mesh.geometry = this.geometry\n  }\n\n  protected updateMaterial(): void {\n    if (!this.mesh || !this.material) return\n\n    if (Array.isArray(this.material)) {\n      this.material.forEach(material => material.color.set(this.color as Color))\n    } else {\n      this.material.color.set(this.color as Color)\n    }\n\n    if (!this.usesNormalMaterial) this.mesh.material = this.material\n  }\n\n  protected createParticle(): P {\n    return new Particle() as P\n  }\n\n  protected prepareParticle(\n    mutation: ParticleSourceMutation,\n    prepare?: (particle: P) => void\n  ): P {\n    if (!this.mesh) throw new Error(\n      'The mesh and particles have not been generated, ' +\n      'call generate() before calling appendParticle() or removeParticle()'\n    )\n\n    let particle!: P\n\n    switch (mutation) {\n      case ParticleSourceMutation.Append:\n        if (this.appendedParticles >= this.mesh.count) throw new Error(\n          `All ${this.mesh.count} particles have already been appended, ` +\n          'increase count and call generate() to append more particles.'\n        )\n\n        particle = this.particles[this.appendedParticles++]\n\n        break\n\n      case ParticleSourceMutation.Remove:\n        if (this.appendedParticles <= 0) throw new Error(\n          `All ${this.mesh.count} particles have already been removed, ` +\n          'you cannot remove more particles.'\n        )\n\n        particle = this.particles[--this.appendedParticles]\n\n        break\n    }\n\n    prepare && prepare(particle)\n\n    return particle\n  }\n\n  public useGLTF(gltf: GLTF): void {\n    const { geometry, material } = mergeGLTF(gltf)\n\n    this.geometry = geometry\n    this.material = material\n  }\n\n  public loadGLTF(url: string, complete?: (gltf: GLTF) => void): void {\n    new GLTFLoader().load(url, (gltf) => {\n      this.useGLTF(gltf)\n      complete && complete(gltf)\n    })\n  }\n\n  public generate(): void {\n    if (!this.geometry || !this.material) throw new Error(\n      'geometry and material must be set before calling generate()'\n    )\n\n    const {\n      particles,\n      count\n    } = this\n\n    this.disposeMesh()\n\n    this.mesh = new InstancedMesh(this.geometry, this.material, count)\n    this.mesh.frustumCulled = false\n\n    this.appendedParticles = Math.min(this.appendedParticles, count)\n    while (particles.length < count) particles.push(this.createParticle())\n    this.disposeParticles(count)\n\n    this.add(this.mesh)\n  }\n\n  public disposeMesh(): void {\n    if (!this.mesh) return\n\n    this.remove(this.mesh)\n    this.mesh = undefined\n  }\n\n  public disposeParticles(index: number = 0): void {\n    this.particles.splice(index).forEach(particle => particle.dispose())\n  }\n\n  public disposeGeometry(): void {\n    if (!this.geometry) return\n\n    this.geometry.dispose()\n    this.geometry = undefined\n  }\n\n  public disposeMaterial(): void {\n    if (!this.material) return\n\n    Array.isArray(this.material)\n      ? this.material.forEach(material => material.dispose())\n      : this.material.dispose()\n\n    this.material = undefined\n  }\n\n  public update(): void {\n    if (!this.mesh) return\n\n    const mesh = this.mesh\n\n    this.particles.forEach((particle, index) => {\n      if (!particle.update()) return\n      mesh.setMatrixAt(index, particle.matrix)\n      mesh.instanceMatrix.needsUpdate = true\n    })\n  }\n\n  public appendParticle({\n    prepare = undefined,\n    complete = undefined,\n    transition = this.transition.append\n  }: ParticleSourceMutationExecutors<P> = {}): void {\n    this\n      .prepareParticle(ParticleSourceMutation.Append, prepare)\n      .append(transition, complete)\n  }\n\n  public removeParticle({\n    prepare = undefined,\n    complete = undefined,\n    transition = this.transition.remove\n  }: ParticleSourceMutationExecutors<P> = {}): void {\n    this\n      .prepareParticle(ParticleSourceMutation.Remove, prepare)\n      .remove(transition, complete)\n  }\n\n  public appendParticles({\n    amount = Infinity,\n    ...executors\n  }: ParticleSourceMutationExecutors<P> & { amount?: number } = {}): void {\n    amount = Math.min(amount, this.count - this.appendedParticles)\n    for (var i = 0; i < amount; i++) this.appendParticle(executors)\n  }\n\n  public removeParticles({\n    amount = Infinity,\n    ...executors\n  }: ParticleSourceMutationExecutors<P> & { amount?: number } = {}): void {\n    amount = Math.min(amount, this.appendedParticles)\n    for (var i = 0; i < amount; i++) this.removeParticle(executors)\n  }\n}\n","export function lazy(\n  target: object,\n  property: string,\n  descriptor: PropertyDescriptor\n): void {\n  const get = descriptor.get!\n\n  descriptor.get = () => Object.defineProperty(target, property, {\n    value: get.call(target)\n  })[property]\n}\n","import {\n  Object3D,\n  Mesh,\n  Material,\n  Geometry,\n  BufferGeometry,\n  Color\n} from 'three'\n\nimport { GLTF } from 'three/examples/jsm/loaders/GLTFLoader'\n\nimport {\n  BufferGeometryUtils\n} from 'three/examples/jsm/utils/BufferGeometryUtils'\n\nexport type ColoredMaterial = Material & { color: Color }\n\nexport function isMesh(object: Object3D): object is Mesh {\n  return (object as unknown as Mesh).isMesh\n}\n\nexport function isBufferGeometry(\n  geometry: Geometry | BufferGeometry\n): geometry is BufferGeometry {\n  return (geometry as BufferGeometry).isBufferGeometry\n}\n\nexport function mergeGLTF(gltf: GLTF): {\n  geometry: BufferGeometry\n  material: ColoredMaterial | ColoredMaterial[]\n} {\n  const geometries: BufferGeometry[] = []\n  const materials: ColoredMaterial[] = []\n\n  gltf.scene.traverse((mesh) => {\n    if (!isMesh(mesh)) return\n\n    mesh.updateMatrixWorld(true)\n    mesh.geometry.applyMatrix(mesh.matrixWorld)\n\n    geometries.push(mesh.geometry as BufferGeometry)\n    materials.push(mesh.material as ColoredMaterial)\n  })\n\n  if (!geometries.length) throw new Error(\n    'Could not find any geometry in GLTF scene'\n  )\n\n  return {\n    geometry: geometries.length === 1\n      ? geometries[0]\n      : BufferGeometryUtils.mergeBufferGeometries(geometries, true),\n\n    material: materials.length === 1\n      ? materials[0]\n      : materials\n  }\n}\n","import { Body as BaseBody, Shape } from 'cannon'\n\nexport class Body extends BaseBody {\n  public removeShape(shape: Shape): this {\n    const index = this.shapes.indexOf(shape)\n\n    if (index !== -1) {\n      this.shapes.splice(index, 1)\n      this.shapeOffsets.splice(index, 1)\n      this.shapeOrientations.splice(index, 1)\n\n      this.updateMassProperties()\n      this.updateBoundingRadius()\n\n      this.aabbNeedsUpdate = true\n    }\n\n    return this\n  }\n\n  public clearShapes(update: boolean = true): this {\n    if (this.shapes.length) {\n      this.shapes.splice(0)\n      this.shapeOffsets.splice(0)\n      this.shapeOrientations.splice(0)\n\n      if (update) {\n        this.updateMassProperties()\n        this.updateBoundingRadius()\n\n        this.aabbNeedsUpdate = true\n      }\n    }\n\n    return this\n  }\n}\n","import { Shape, Vec3 } from 'cannon'\nimport { Vector3, Quaternion } from 'three'\nimport { Particle } from '~/particle'\nimport { Body } from '~/body'\nimport { TransitionExecutor } from '~/transition'\n\nexport class PhysicalParticle extends Particle {\n  protected readonly freezeDelay: number = Infinity\n  protected readonly freezeFactor: Vec3 = new Vec3(0.9, 1, 0.9)\n  protected readonly freezeThreshold: number = 0.001\n  protected freezeTimeout?: number\n  protected freezing: boolean = false\n  protected frozen: boolean = false\n\n  public readonly body: Body\n\n  public constructor() {\n    super()\n    this.body = new Body(this.bodyParameters)\n  }\n\n  protected get bodyParameters(): { [parameter: string]: unknown } {\n    return {\n      mass: 1,\n      type: Body.DYNAMIC\n    }\n  }\n\n  protected freeze(): void {\n    const velocity = this.body.velocity\n\n    if (velocity.almostZero(this.freezeThreshold)) {\n      this.frozen = true\n      this.freezing = false\n\n      this.body.type = Body.STATIC\n\n      return\n    }\n\n    const freezeFactor = this.freezeFactor\n\n    velocity.x *= freezeFactor.x\n    velocity.y *= freezeFactor.y\n    velocity.z *= freezeFactor.z\n  }\n\n  protected requestFreeze(): void {\n    if (this.freezeDelay === Infinity) return\n    this.cancelFreeze()\n    this.freezeTimeout = window.setTimeout(() => {\n      this.freezing = true\n    }, this.freezeDelay)\n  }\n\n  protected cancelFreeze(): void {\n    if (this.freezeTimeout === undefined) return\n    clearTimeout(this.freezeTimeout)\n    this.freezeTimeout = undefined\n  }\n\n  public append(\n    transition?: TransitionExecutor,\n    complete?: (particle: this) => void\n  ): void {\n    this.freezing = this.frozen = false\n    this.body.type = Body.DYNAMIC\n    super.append(transition, (particle) => {\n      this.requestFreeze()\n      complete && complete(particle)\n    })\n  }\n\n  public remove(\n    transition?: TransitionExecutor,\n    complete?: (particle: this) => void\n  ): void {\n    this.cancelFreeze()\n    super.remove(transition, complete)\n  }\n\n  public update(): boolean {\n    if (!this.appended) return false\n    this.freezing && this.freeze()\n    this.frozen || this.synchronizeBody()\n    return super.update()\n  }\n\n  public clearBodyShape(): void {\n    this.body.clearShapes()\n  }\n\n  public setBodyShape(shape: Shape): void {\n    this.body.clearShapes(false)\n    this.body.addShape(shape)\n  }\n\n  public synchronizeBody(): void {\n    this.position.copy(this.body.position as unknown as Vector3)\n    this.quaternion.copy(this.body.quaternion as unknown as Quaternion)\n  }\n\n  public resetBodyPosition(): void {\n    const { x, y, z } = this.position\n    this.body.position.set(x, y, z)\n  }\n\n  public resetBodyQuaternion(): void {\n    const { x, y, z, w } = this.quaternion\n    this.body.quaternion.set(x, y, z, w)\n  }\n\n  public resetBodyVelocity(): void {\n    this.body.velocity.set(0, 0, 0)\n  }\n\n  public resetBodyAngularVelocity(): void {\n    this.body.angularVelocity.set(0, 0, 0)\n  }\n}\n","import { World, Box, Vec3, Shape } from 'cannon'\nimport { PhysicalParticle } from '~/physical-particle'\n\nimport {\n  ParticleSource,\n  ParticleSourceParameters,\n  ParticleSourceMutationExecutors\n} from '~/particle-source'\n\nexport interface PhysicalParticleSourceParameters\n  extends ParticleSourceParameters {\n  world: World\n}\n\nexport class PhysicalParticleSource extends ParticleSource<PhysicalParticle> {\n  public readonly world: World\n  protected shape?: Shape\n\n  public constructor({\n    world,\n    ...parameters\n  }: PhysicalParticleSourceParameters) {\n    super(parameters)\n    this.world = world\n  }\n\n  protected updateGeometry(): void {\n    if (this.geometry) {\n      const shape = this.shape = this.createShape()\n      this.particles.forEach(particle => particle.setBodyShape(shape))\n    } else {\n      this.particles.forEach(particle => particle.clearBodyShape())\n    }\n  }\n\n  protected createShape(): Shape {\n    this.geometry!.boundingBox || this.geometry!.computeBoundingBox()\n\n    const box = this.geometry!.boundingBox\n\n    return new Box(new Vec3(\n      (box.max.x - box.min.x) / 2,\n      (box.max.y - box.min.y) / 2,\n      (box.max.z - box.min.z) / 2\n    ))\n  }\n\n  protected createParticle(): PhysicalParticle {\n    const particle = new PhysicalParticle()\n    this.shape && particle.setBodyShape(this.shape)\n    return particle\n  }\n\n  public appendParticle({\n    prepare = undefined,\n    ...executors\n  }: ParticleSourceMutationExecutors<PhysicalParticle> = {}): void {\n    super.appendParticle({\n      ...executors,\n      prepare: (particle) => {\n        particle.resetBodyVelocity()\n        particle.resetBodyAngularVelocity()\n\n        prepare && prepare(particle)\n\n        particle.resetBodyPosition()\n        particle.resetBodyQuaternion()\n\n        this.world.addBody(particle.body)\n      }\n    })\n  }\n\n  public removeParticle({\n    complete = undefined,\n    ...executors\n  }: ParticleSourceMutationExecutors<PhysicalParticle> = {}): void {\n    super.removeParticle({\n      ...executors,\n      complete: (particle) => {\n        this.world.remove(particle.body)\n        complete && complete(particle)\n      }\n    })\n  }\n}\n"],"names":["this","Vector3","Quaternion","Transition","_i","executors","transition","complete","animationsToComplete","length","animations","map","executor","pause","forEach","animation","stop","_this","undefined","console","log","scale","set","Matrix4","Particle","appended","start","show","hide","removed","matrix","compose","position","clone","add","quaternion","multiply","dispose","ParticleSourceMutation","lazy","target","property","descriptor","get","Object","defineProperty","value","call","_a","_b","_c","geometry","_d","material","_e","count","_f","color","_g","_super","tslib_1.__extends","ParticleSource","MeshNormalMaterial","morphTargets","skinning","mesh","_geometry","v","updateGeometry","_material","updateMaterial","_color","Array","isArray","_usesNormalMaterial","normalMaterial","usesNormalMaterial","mutation","prepare","Error","particle","Append","appendedParticles","particles","Remove","gltf","geometries","materials","scene","traverse","isMesh","updateMatrixWorld","applyMatrix","matrixWorld","push","BufferGeometryUtils","mergeBufferGeometries","url","GLTFLoader","load","useGLTF","disposeMesh","InstancedMesh","frustumCulled","Math","min","createParticle","disposeParticles","remove","index","splice","update","setMatrixAt","instanceMatrix","needsUpdate","prepareParticle","append","amount","i","appendParticle","removeParticle","tslib_1.__decorate","Object3D","Body","shape","shapes","indexOf","shapeOffsets","shapeOrientations","updateMassProperties","updateBoundingRadius","aabbNeedsUpdate","BaseBody","Infinity","Vec3","body","bodyParameters","PhysicalParticle","mass","type","DYNAMIC","velocity","almostZero","freezeThreshold","frozen","freezing","STATIC","freezeFactor","x","y","z","freezeDelay","cancelFreeze","freezeTimeout","window","setTimeout","clearTimeout","requestFreeze","freeze","synchronizeBody","clearShapes","addShape","copy","w","angularVelocity","world","parameters","PhysicalParticleSource","shape_1","createShape","setBodyShape","clearBodyShape","boundingBox","computeBoundingBox","box","Box","max","resetBodyVelocity","resetBodyAngularVelocity","resetBodyPosition","resetBodyQuaternion","addBody"],"mappings":"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"}